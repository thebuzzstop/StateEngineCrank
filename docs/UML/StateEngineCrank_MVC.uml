@startuml

hide empty members

package "StateEngineCrank MVC" <<Frame>> {

    package MVC <<Frame>> {
        class Thread

        abstract class MVC.MVC {
            name : MVC element name
            running : boolean : True when running
            stopping : boolean : True when stopping
            _stopevent : Event : Set to cause element to stop
            ---
            {abstract} run() : main thread execution target
            stop() : initiate stopping
            join() : called to terminate a thread
            ---
            set_running() : accessor to set the running flag
            set_stopping() : accessor to set the stopping flag
        }

        abstract class MVC.Model {
            views{} : dictionary of views
            ---
            {abstract} run() : main thread execution target
            {abstract} register(view) : register view with model
            update() : update all views
        }
        MVC.Model --|> MVC.MVC
        MVC.MVC --|> Thread

        abstract class MVC.View {
            model{} : dictionary of models
            ---
            {abstract} run() : main thread execution target
            {abstract}register(model) : register model with view
            {abstract} update() : called to update view
        }
        MVC.View --|> MVC.MVC

        abstract class MVC.Controller {
            models{} : dictionary of models
            views{} : dictionary of views
            ---
            {abstract} run() : main thread execution target
            {abstract} register(mv) : register a model or a view
            update() : called to update views
        }
        MVC.Controller --|> MVC.MVC
    }

    package Model <<Frame>> {
        package StateEngineCrank <<Frame>> {
            abstract class StateEngineCrank.StateMachine {
                id : statemachine ID
                name : string name
                startup_state : initial state
                running : boolean True when running
                event_queue : queue.Queue()
                current_state : state
                ---
                run() : function to run the state machine
                do() : executes Do() function
                post_event(event) : posts event to state machine
                event(event) : performs event processing
            }
            class StateEngineCrank.Model {
            }
            StateEngineCrank.Model --|> MVC.Model
        }
        package DiningPhilosophers <<Frame>> {
            class DiningPhilosophers.Config {
                NUM_PHILOSOPHERS
                EATING_MIN_TIME
                EATING_MAX_TIME
                THINKING_MIN_TIME
                THINKING_MAX_TIME
            }
            class DiningPhilosophers.Model {
                philosophers[] : list of dining philosophers
                forks[] : list of forks
                waiter : waiter used as arbiter of forks
            }
            DiningPhilosophers.Model --|> MVC.Model
            DiningPhilosophers.Model --> DiningPhilosophers.Config
            DiningPhilosophers.Model --|> StateEngineCrank.StateMachine
        }
        package SleepingBarbers <<Frame>> {
            class WaitingRoom {
                get_chair(customer) : called to get a chair
                get_customer() : barber calls to get a customer
                customer_waiting() : barber checks for waiting customers
            }
            class SleepingBarbers.Config {
                NUM_BARBERS
                NUM_WAITING_CHAIRS
                CUTTING_MIN_TIME
                CUTTING_MAX_TIME
                CUSTOMER_RATE_MIN
                CUSTOMER_RATE_MAX
            }
            class Barber {
                register(view) : register view with model
            }
            Barber --> WaitingRoom

            class Customer {
                register(view) : register view with model
            }
            Customer --> WaitingRoom

            class SleepingBarbers.Model {
                statistics : statistics module
                barbers[] : list of barbers available
                customers[] : list of customers, grows with simulation
                waiting_chairs[] : list of waiting room chairs
                ---
                register(view) : register view with model
            }
            SleepingBarbers.Model --|> MVC.Model
            SleepingBarbers.Model --* "[1..*]" Barber
            SleepingBarbers.Model --* "[1..*]" Customer
            SleepingBarbers.Model --> WaitingRoom
            SleepingBarbers.Model --|> StateEngineCrank.StateMachine
            SleepingBarbers.Model --> SleepingBarbers.Config
            class CustomerGenerator {
                running : True - simulation is running
                customers[] : list of customers
                ---
                run() : main thread execution target
            }
            CustomerGenerator --* Customer
        }
    }

    package View <<Frame>> {
        class View.Console {
            run() : main thread execution target
            update() : update view
        }
        class View.GUI {
            run() : main thread execution target
            update() : update view
            tk_run() : GUI thread execution
        }
        View.Console --|> MVC.View
        View.GUI --|> MVC.View
    }

    package Controller <<Frame>> {
        class Controller.Controller {
            models{} : dictionary of models
            views{} : dictionary of views
            ---
            philosophers : class instantiation
            barbers : class instantiation
            console : class instantiation
            gui : class instantiation
            ---
            run() : main thread execution target
            stop() : stop main loop execution
            update() : function to initiate view updates
        }
    }
    Controller.Controller --|> MVC.Controller
    Controller --* StateEngineCrank
    Controller --* DiningPhilosophers
    Controller --* SleepingBarbers
    Controller --> View
}
@enduml
